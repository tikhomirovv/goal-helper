package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"goal-helper/internal/llm"
	"goal-helper/internal/models"
	"goal-helper/internal/repository"

	tele "gopkg.in/telebot.v3"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram-–±–æ—Ç–∞
type Bot struct {
	bot       *tele.Bot
	repo      repository.Repository
	llmClient llm.Client
	states    map[int64]*UserState // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}

// UserState –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
type UserState struct {
	UserID   int64
	State    string            // "idle", "creating_goal", "waiting_title", "waiting_description"
	TempData map[string]string // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(token string, repo repository.Repository, llmClient llm.Client) *Bot {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
	pref := tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 10},
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	b := &Bot{
		bot:       bot,
		repo:      repo,
		llmClient: llmClient,
		states:    make(map[int64]*UserState),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	b.registerHandlers()

	return b
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	log.Println("Bot started...")
	b.bot.Start()
	return nil
}

// registerHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func (b *Bot) registerHandlers() {
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	b.bot.Handle("/start", b.handleStart)
	b.bot.Handle("/help", b.handleHelp)
	b.bot.Handle("/goals", b.handleGoals)
	b.bot.Handle("/newgoal", b.handleNewGoal)
	b.bot.Handle("/status", b.handleStatus)
	b.bot.Handle("/step", b.handleStep)
	b.bot.Handle("/done", b.handleDone)
	b.bot.Handle("/next", b.handleNext)
	b.bot.Handle("/rephrase", b.handleRephrase)
	b.bot.Handle("/switch", b.handleSwitch)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	b.bot.Handle(tele.OnText, b.handleText)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)
	username := c.Sender().Username
	firstName := c.Sender().FirstName

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	user, err := b.repo.GetUser(userID)
	if err != nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user = models.NewUser(userID, username, firstName)
		if err := b.repo.CreateUser(user); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.states[c.Sender().ID] = &UserState{
		UserID:   c.Sender().ID,
		State:    "idle",
		TempData: make(map[string]string),
	}

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("üéØ –ü—Ä–∏–≤–µ—Ç, %s!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏.\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", firstName)

	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnGoals := menu.Text("üìã –ú–æ–∏ —Ü–µ–ª–∏")
	btnNewGoal := menu.Text("‚ûï –ù–æ–≤–∞—è —Ü–µ–ª—å")

	menu.Reply(
		menu.Row(btnGoals),
		menu.Row(btnNewGoal),
	)

	return c.Send(message, menu)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(c tele.Context) error {
	helpText := `üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üéØ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/goals - –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π
/newgoal - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å
/status - –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏

üìù **–†–∞–±–æ—Ç–∞ —Å —à–∞–≥–∞–º–∏:**
/step - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
/done - –û—Ç–º–µ—Ç–∏—Ç—å —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
/next - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
/rephrase - –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥

üîÑ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
/switch - –°–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å

üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –°–æ–∑–¥–∞–π —Ü–µ–ª—å
2. –ü–æ–ª—É—á–∞–π –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
3. –í—ã–ø–æ–ª–Ω—è–π —à–∞–≥–∏ –∏ –æ—Ç–º–µ—á–∞–π –∏—Ö
4. –î–≤–∏–≥–∞–π—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É!`

	return c.Send(helpText, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleGoals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /goals
func (b *Bot) handleGoals(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	goals, err := b.repo.GetUserGoals(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π")
	}

	if len(goals) == 0 {
		return c.Send("üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π.\n\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal")
	}

	var message strings.Builder
	message.WriteString("üìã **–¢–≤–æ–∏ —Ü–µ–ª–∏:**\n\n")

	for i, goal := range goals {
		status := "‚è≥"
		if goal.ID == c.Sender().Username { // TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏
			status = "üéØ"
		}
		message.WriteString(fmt.Sprintf("%s **%d. %s**\n", status, i+1, goal.Title))
		if goal.Description != "" {
			message.WriteString(fmt.Sprintf("   %s\n", goal.Description))
		}
		message.WriteString("\n")
	}

	return c.Send(message.String(), &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleNewGoal –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /newgoal
func (b *Bot) handleNewGoal(c tele.Context) error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏"
	state := b.getOrCreateState(c.Sender().ID)
	state.State = "waiting_title"
	state.TempData = make(map[string]string)

	return c.Send("üéØ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ü–µ–ª—å.\n\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è —Ü–µ–ª—å?")
}

// handleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (b *Bot) handleStatus(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.\n\n–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /goals –∏–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /newgoal")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	steps, err := b.repo.GetGoalSteps(goal.ID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤")
	}

	completedCount := 0
	for _, step := range steps {
		if step.IsCompleted() {
			completedCount++
		}
	}

	message := fmt.Sprintf("üéØ **–ê–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å:** %s\n\n", goal.Title)
	if goal.Description != "" {
		message += fmt.Sprintf("üìù %s\n\n", goal.Description)
	}
	message += fmt.Sprintf("üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** %d/%d —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n", completedCount, len(steps))
	message += "–ò—Å–ø–æ–ª—å–∑—É–π /step —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥"

	return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleStep –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /step
func (b *Bot) handleStep(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.\n\n–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /goals")
	}

	currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
	}

	message := fmt.Sprintf("üìù **–¢–µ–∫—É—â–∏–π —à–∞–≥:**\n\n%s", currentStep.Text)

	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
	btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")

	menu.Reply(
		menu.Row(btnDone),
		menu.Row(btnRephrase),
	)

	return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleDone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /done
func (b *Bot) handleDone(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏")
	}

	// –û—Ç–º–µ—á–∞–µ–º —à–∞–≥ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
	currentStep.Complete()
	if err := b.repo.UpdateStep(currentStep); err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞")
	}

	return c.Send("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
}

// handleNext –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /next
func (b *Bot) handleNext(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏
	allSteps, err := b.repo.GetGoalSteps(goal.ID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤")
	}

	var completedSteps []*models.Step
	for _, step := range allSteps {
		if step.IsCompleted() {
			completedSteps = append(completedSteps, step)
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —á–µ—Ä–µ–∑ LLM
	response, err := b.llmClient.GenerateStep(goal, completedSteps)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞")
	}

	if response.Status == "need_clarification" {
		return c.Send(fmt.Sprintf("‚ùì %s", response.Question))
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
	newStep := models.NewStep(goal.ID, response.Step)
	if err := b.repo.CreateStep(newStep); err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞")
	}

	message := fmt.Sprintf("üìù **–ù–æ–≤—ã–π —à–∞–≥:**\n\n%s", newStep.Text)

	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
	btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")

	menu.Reply(
		menu.Row(btnDone),
		menu.Row(btnRephrase),
	)

	return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleRephrase –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rephrase
func (b *Bot) handleRephrase(c tele.Context) error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞"
	state := b.getOrCreateState(c.Sender().ID)
	state.State = "rephrasing"
	state.TempData = make(map[string]string)

	return c.Send("üîÑ –û–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ\", \"–ù–µ–ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ –¥–µ–ª–∞—Ç—å\", \"–ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø—Ä–æ—â–µ\"")
}

// handleSwitch –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /switch
func (b *Bot) handleSwitch(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	goals, err := b.repo.GetUserGoals(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π")
	}

	if len(goals) == 0 {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
	}

	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
	return c.Send("üîÑ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:\n\n" + b.formatGoalsList(goals))
}

// handleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleText(c tele.Context) error {
	state := b.getOrCreateState(c.Sender().ID)
	text := c.Text()

	switch state.State {
	case "waiting_title":
		state.TempData["title"] = text
		state.State = "waiting_description"
		return c.Send("üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ)")

	case "waiting_description":
		if text == "." {
			state.TempData["description"] = ""
		} else {
			state.TempData["description"] = text
		}

		// –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å
		userID := strconv.FormatInt(c.Sender().ID, 10)
		goal := models.NewGoal(userID, state.TempData["title"], state.TempData["description"])

		if err := b.repo.CreateGoal(goal); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏")
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
		user, err := b.repo.GetUser(userID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}
		user.ActiveGoalID = goal.ID
		if err := b.repo.UpdateUser(user); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.State = "idle"
		state.TempData = make(map[string]string)

		message := fmt.Sprintf("üéØ –¶–µ–ª—å \"%s\" —Å–æ–∑–¥–∞–Ω–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è!\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥", goal.Title)
		return c.Send(message)

	case "rephrasing":
		userID := strconv.FormatInt(c.Sender().ID, 10)
		user, err := b.repo.GetUser(userID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
		}

		goal, err := b.repo.GetGoal(user.ActiveGoalID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
		}

		// –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º —à–∞–≥ —á–µ—Ä–µ–∑ LLM
		response, err := b.llmClient.RephraseStep(goal, currentStep, text)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ —à–∞–≥–∞")
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
		currentStep.Text = response.Step
		currentStep.Rephrase(text)
		if err := b.repo.UpdateStep(currentStep); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞")
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.State = "idle"
		state.TempData = make(map[string]string)

		message := fmt.Sprintf("üîÑ –®–∞–≥ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω:\n\n%s", currentStep.Text)
		return c.Send(message)

	default:
		return c.Send("üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
	}
}

// getOrCreateState –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getOrCreateState(userID int64) *UserState {
	if state, exists := b.states[userID]; exists {
		return state
	}

	state := &UserState{
		UserID:   userID,
		State:    "idle",
		TempData: make(map[string]string),
	}
	b.states[userID] = state
	return state
}

// formatGoalsList —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (b *Bot) formatGoalsList(goals []*models.Goal) string {
	var result strings.Builder
	for i, goal := range goals {
		result.WriteString(fmt.Sprintf("%d. %s\n", i+1, goal.Title))
	}
	return result.String()
}
