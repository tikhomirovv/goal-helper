package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"goal-helper/internal/llm"
	"goal-helper/internal/models"
	"goal-helper/internal/repository"

	tele "gopkg.in/telebot.v3"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram-–±–æ—Ç–∞
type Bot struct {
	bot       *tele.Bot
	repo      repository.Repository
	llmClient llm.Client
	states    map[int64]*UserState // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}

// UserState –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FSM
type UserState struct {
	UserID   int64
	State    string            // "idle", "waiting_goal_description", "rephrasing", "gathering_context"
	TempData map[string]string // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(token string, repo repository.Repository, llmClient llm.Client) *Bot {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
	pref := tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 10},
	}

	bot, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	b := &Bot{
		bot:       bot,
		repo:      repo,
		llmClient: llmClient,
		states:    make(map[int64]*UserState),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	b.registerHandlers()

	return b
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() error {
	log.Println("Bot started...")
	b.bot.Start()
	return nil
}

// registerHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func (b *Bot) registerHandlers() {
	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	b.bot.Handle("/start", b.handleStart)
	b.bot.Handle("/help", b.handleHelp)
	b.bot.Handle("/goals", b.handleGoals)
	b.bot.Handle("/newgoal", b.handleNewGoal)
	b.bot.Handle("/status", b.handleStatus)
	b.bot.Handle("/step", b.handleStep)
	b.bot.Handle("/done", b.handleDone)
	b.bot.Handle("/next", b.handleNext)
	b.bot.Handle("/rephrase", b.handleRephrase)
	b.bot.Handle("/simpler", b.handleSimpler)
	b.bot.Handle("/switch", b.handleSwitch)
	b.bot.Handle("/complete", b.handleComplete)
	b.bot.Handle("/context", b.handleContext)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
	b.bot.Handle(&tele.Btn{Text: "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª"}, b.handleDone)
	b.bot.Handle(&tele.Btn{Text: "üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å"}, b.handleRephrase)
	b.bot.Handle(&tele.Btn{Text: "üîΩ –£–ø—Ä–æ—Å—Ç–∏—Ç—å"}, b.handleSimpler)
	b.bot.Handle(&tele.Btn{Text: "üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å"}, b.handleComplete)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	b.bot.Handle(tele.OnText, b.handleText)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)
	username := c.Sender().Username
	firstName := c.Sender().FirstName

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	_, err := b.repo.GetUser(userID)
	if err != nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := models.NewUser(userID, username, firstName)
		if err := b.repo.CreateUser(user); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.states[c.Sender().ID] = &UserState{
		UserID:   c.Sender().ID,
		State:    "idle",
		TempData: make(map[string]string),
	}

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("üéØ –ü—Ä–∏–≤–µ—Ç, %s!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏.\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", firstName)

	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnGoals := menu.Text("üìã –ú–æ–∏ —Ü–µ–ª–∏")
	btnNewGoal := menu.Text("‚ûï –ù–æ–≤–∞—è —Ü–µ–ª—å")

	menu.Reply(
		menu.Row(btnGoals),
		menu.Row(btnNewGoal),
	)

	return c.Send(message, menu)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(c tele.Context) error {
	message := `ü§ñ **–ü–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/goals - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π
/newgoal - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å
/status - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏
/step - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
/done - –û—Ç–º–µ—Ç–∏—Ç—å —à–∞–≥ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
/next - –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
/rephrase - –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
/simpler - –°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø—Ä–æ—â–µ (–µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π)
/complete - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å (–µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –æ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)
/switch - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Ü–µ–ª—å
/context - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ç–µ–±–µ

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –°–æ–∑–¥–∞–π —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal
2. –ë–æ—Ç –∑–∞–¥–∞—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–≤–æ–µ–º –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö
3. –ü–æ–ª—É—á–∏ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫–æ–º–∞–Ω–¥–æ–π /next
4. –í—ã–ø–æ–ª–Ω–∏ —à–∞–≥ –∏ –æ—Ç–º–µ—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /done
5. –ü–æ–ª—É—á–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∫–æ–º–∞–Ω–¥–æ–π /next
6. –ü–æ–≤—Ç–æ—Ä—è–π, –ø–æ–∫–∞ —Ü–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞

**–í–∞–∂–Ω–æ:** –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º - –æ—Ç 5 –º–∏–Ω—É—Ç –¥–æ –º–∞–∫—Å–∏–º—É–º 1 –¥–Ω—è. –ï—Å–ª–∏ —à–∞–≥ –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π /simpler –∏–ª–∏ /rephrase.

**–°—Ç–∞—Ç—É—Å—ã —Ü–µ–ª–µ–π:**
üéØ - –ê–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å
‚úÖ - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ü–µ–ª—å
‚è≥ - –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å

–ë–æ—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–æ–≥–¥–∞ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /complete.`

	return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleGoals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /goals
func (b *Bot) handleGoals(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	goals, err := b.repo.GetUserGoals(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π")
	}

	if len(goals) == 0 {
		return c.Send("üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π.\n\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal")
	}

	var message strings.Builder
	message.WriteString("üìã **–¢–≤–æ–∏ —Ü–µ–ª–∏:**\n\n")

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	for i, goal := range goals {
		status := "‚è≥"
		if goal.Status == "completed" {
			status = "‚úÖ"
		} else if goal.ID == user.ActiveGoalID {
			status = "üéØ"
		}
		message.WriteString(fmt.Sprintf("%s **%d. %s**\n", status, i+1, goal.Title))
		if goal.Description != "" {
			message.WriteString(fmt.Sprintf("   %s\n", goal.Description))
		}
		message.WriteString("\n")
	}

	return c.Send(message.String(), &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleNewGoal –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /newgoal
func (b *Bot) handleNewGoal(c tele.Context) error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏"
	state := b.getOrCreateState(c.Sender().ID)
	state.State = "waiting_goal_description"
	state.TempData = make(map[string]string)

	return c.Send("üéØ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ü–µ–ª—å.\n\n–û–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–æ - —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å? –Ø —Å–∞–º –ø—Ä–∏–¥—É–º–∞—é –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
}

// handleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (b *Bot) handleStatus(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.\n\n–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /goals –∏–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /newgoal")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏
	if goal.Status == "completed" {
		return c.Send("‚úÖ –≠—Ç–∞ —Ü–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /goals")
	}

	steps, err := b.repo.GetGoalSteps(goal.ID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤")
	}

	completedCount := 0
	for _, step := range steps {
		if step.IsCompleted() {
			completedCount++
		}
	}

	message := fmt.Sprintf("üéØ **–ê–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å:** %s\n\n", goal.Title)
	if goal.Description != "" {
		message += fmt.Sprintf("üìù %s\n\n", goal.Description)
	}
	message += fmt.Sprintf("üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** %d/%d —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n", completedCount, len(steps))
	message += "–ò—Å–ø–æ–ª—å–∑—É–π /step —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥"

	return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleStep –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /step
func (b *Bot) handleStep(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏.\n\n–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /goals")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏
	if goal.Status == "completed" {
		return c.Send("‚úÖ –≠—Ç–∞ —Ü–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /goals")
	}

	currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
	}

	message := fmt.Sprintf("üìù **–¢–µ–∫—É—â–∏–π —à–∞–≥:**\n\n%s", currentStep.Text)

	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
	btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")
	btnSimpler := menu.Text("üîΩ –£–ø—Ä–æ—Å—Ç–∏—Ç—å")

	menu.Reply(
		menu.Row(btnDone),
		menu.Row(btnRephrase, btnSimpler),
	)

	return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleDone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /done
func (b *Bot) handleDone(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏
	if goal.Status == "completed" {
		return c.Send("‚úÖ –≠—Ç–∞ —Ü–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /goals")
	}

	currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏")
	}

	// –û—Ç–º–µ—á–∞–µ–º —à–∞–≥ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
	currentStep.Complete()
	if err := b.repo.UpdateStep(currentStep); err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞")
	}

	return c.Send("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
}

// handleNext –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /next
func (b *Bot) handleNext(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏
	if goal.Status == "completed" {
		return c.Send("‚úÖ –≠—Ç–∞ —Ü–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /goals")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —Ü–µ–ª–∏
	allSteps, err := b.repo.GetGoalSteps(goal.ID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–≥–æ–≤")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏
	var currentStep *models.Step
	var completedSteps []*models.Step

	for _, step := range allSteps {
		if step.IsCompleted() {
			completedSteps = append(completedSteps, step)
		} else {
			// –ù–∞—à–ª–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–≥
			if currentStep == nil || step.CreatedAt.Before(currentStep.CreatedAt) {
				currentStep = step
			}
		}
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–≥, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
	if currentStep != nil {
		message := fmt.Sprintf("‚è≥ –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–≥:\n\n**%s**\n\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —à–∞–≥ –∫–æ–º–∞–Ω–¥–æ–π /done, –∞ –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏ —Å–ª–µ–¥—É—é—â–∏–π.", currentStep.Text)
		return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
	}

	// –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
	log.Printf("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Ü–µ–ª–∏: %s", goal.Title)
	log.Printf("üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤: %d", len(completedSteps))

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if len(completedSteps) == 0 && len(goal.Context.Clarifications) == 0 {
		// –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–±—Ä–∞–Ω - —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		log.Printf("üîç –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏")
		contextResponse, err := b.llmClient.GatherContext(goal)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: %v", err)
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
		}

		if contextResponse.Status == "need_context" {
			// –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
			state := b.getOrCreateState(c.Sender().ID)
			state.State = "gathering_context"
			state.TempData["goal_id"] = goal.ID
			state.TempData["context_question"] = contextResponse.Question

			message := fmt.Sprintf("üîç –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ —Ç–µ–±–µ:\n\n**%s**\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –∏ —è —Å–º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —à–∞–≥–∏.", contextResponse.Question)
			return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
		}
	}

	response, err := b.llmClient.GenerateStep(goal, completedSteps)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞: %v", err)
		return c.Send(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞: %v", err))
	}

	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM: —Å—Ç–∞—Ç—É—Å=%s, —à–∞–≥=%s", response.Status, response.Step)

	if response.Status == "need_clarification" {
		return c.Send(fmt.Sprintf("‚ùì %s", response.Question))
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–µ–ª–∏
	if response.Status == "goal_completed" {
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏
		userID := strconv.FormatInt(c.Sender().ID, 10)
		user, err := b.repo.GetUser(userID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		if err := b.completeGoal(goal, user, response.CompletionReason); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–µ–ª–∏")
		}
		message := fmt.Sprintf("üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!**\n\n**%s**\n\n%s\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal",
			goal.Title, response.CompletionReason)
		return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
	if response.Status == "near_completion" {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
		newStep := models.NewStep(goal.ID, response.Step)
		if err := b.repo.CreateStep(newStep); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞")
		}

		message := fmt.Sprintf("üéØ **–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ:**\n\n%s\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —à–∞–≥–∞ —Ü–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!", newStep.Text)

		menu := &tele.ReplyMarkup{ResizeKeyboard: true}
		btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
		btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")
		btnSimpler := menu.Text("üîΩ –£–ø—Ä–æ—Å—Ç–∏—Ç—å")
		btnComplete := menu.Text("üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å")

		menu.Reply(
			menu.Row(btnDone),
			menu.Row(btnRephrase, btnSimpler),
			menu.Row(btnComplete),
		)

		return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
	}

	// –û–±—ã—á–Ω—ã–π —à–∞–≥
	if response.Status == "ok" {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
		newStep := models.NewStep(goal.ID, response.Step)
		if err := b.repo.CreateStep(newStep); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞")
		}

		message := fmt.Sprintf("üìù **–ù–æ–≤—ã–π —à–∞–≥:**\n\n%s", newStep.Text)

		menu := &tele.ReplyMarkup{ResizeKeyboard: true}
		btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
		btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")
		btnSimpler := menu.Text("üîΩ –£–ø—Ä–æ—Å—Ç–∏—Ç—å")

		menu.Reply(
			menu.Row(btnDone),
			menu.Row(btnRephrase, btnSimpler),
		)

		return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
	}

	// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
	return c.Send("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã")
}

// handleRephrase –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rephrase
func (b *Bot) handleRephrase(c tele.Context) error {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞"
	state := b.getOrCreateState(c.Sender().ID)
	state.State = "rephrasing"
	state.TempData = make(map[string]string)

	return c.Send("üîÑ –û–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ\", \"–ù–µ–ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ –¥–µ–ª–∞—Ç—å\", \"–ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø—Ä–æ—â–µ\"")
}

// handleSimpler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /simpler
func (b *Bot) handleSimpler(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏
	if goal.Status == "completed" {
		return c.Send("‚úÖ –≠—Ç–∞ —Ü–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ /goals")
	}

	currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —à–∞–≥–∏ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥")
	}

	// –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º —à–∞–≥ —Å –ø—Ä–æ—Å—å–±–æ–π —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—Ä–æ—â–µ
	response, err := b.llmClient.RephraseStep(goal, currentStep, "–°–¥–µ–ª–∞–π —ç—Ç–æ—Ç —à–∞–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º - –æ—Ç 5 –º–∏–Ω—É—Ç –¥–æ –º–∞–∫—Å–∏–º—É–º 1 –¥–Ω—è. –†–∞–∑–±–µ–π –Ω–∞ —Å–∞–º—É—é –ø—Ä–æ—Å—Ç—É—é –≤–æ–∑–º–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É.")
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–æ—â–µ–Ω–∏–∏ —à–∞–≥–∞")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
	currentStep.Text = response.Step
	currentStep.Rephrase("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–æ—â–µ–Ω–∏–µ —à–∞–≥–∞")
	if err := b.repo.UpdateStep(currentStep); err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞")
	}

	message := fmt.Sprintf("üîÑ –®–∞–≥ —É–ø—Ä–æ—â–µ–Ω:\n\n**%s**\n\nüí° –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ!", currentStep.Text)

	menu := &tele.ReplyMarkup{ResizeKeyboard: true}
	btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
	btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")

	menu.Reply(
		menu.Row(btnDone),
		menu.Row(btnRephrase),
	)

	return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleSwitch –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /switch
func (b *Bot) handleSwitch(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	goals, err := b.repo.GetUserGoals(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π")
	}

	if len(goals) == 0 {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
	}

	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
	return c.Send("üîÑ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:\n\n" + b.formatGoalsList(goals))
}

// handleText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleText(c tele.Context) error {
	state := b.getOrCreateState(c.Sender().ID)
	text := c.Text()

	log.Printf("üîç –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", text)
	log.Printf("üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", state.State)

	switch state.State {
	case "waiting_goal_description":
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ LLM
		title, err := b.llmClient.GenerateGoalTitle(text)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏")
		}

		// –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å
		userID := strconv.FormatInt(c.Sender().ID, 10)
		goal := models.NewGoal(userID, title, text)

		if err := b.repo.CreateGoal(goal); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏")
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
		user, err := b.repo.GetUser(userID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}
		user.ActiveGoalID = goal.ID
		if err := b.repo.UpdateUser(user); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}
		log.Printf("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %+v", user)
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.State = "idle"
		state.TempData = make(map[string]string)

		message := fmt.Sprintf("üéØ –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** %s\n**–û–ø–∏—Å–∞–Ω–∏–µ:** %s\n\n–ò—Å–ø–æ–ª—å–∑—É–π /next —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥", goal.Title, goal.Description)
		return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})

	case "gathering_context":
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
		goalID := state.TempData["goal_id"]
		question := state.TempData["context_question"]

		if goalID == "" {
			return c.Send("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ü–µ–ª–∏")
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
		goal, err := b.repo.GetGoal(goalID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
		goal.AddClarification(question, text)
		if err := b.repo.UpdateGoal(goal); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏")
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –µ—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç
		contextResponse, err := b.llmClient.GatherContext(goal)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
		}

		if contextResponse.Status == "need_context" {
			// –ù—É–∂–µ–Ω –µ—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç
			state.TempData["context_question"] = contextResponse.Question
			message := fmt.Sprintf("üîç –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:\n\n**%s**", contextResponse.Question)
			return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
		}

		// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
		completedSteps := []*models.Step{} // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
		response, err := b.llmClient.GenerateStep(goal, completedSteps)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞")
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.State = "idle"
		state.TempData = make(map[string]string)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç LLM
		if response.Status == "need_clarification" {
			return c.Send(fmt.Sprintf("‚ùì %s", response.Question))
		}

		if response.Status == "goal_completed" {
			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏
			userID := strconv.FormatInt(c.Sender().ID, 10)
			user, err := b.repo.GetUser(userID)
			if err != nil {
				return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			}

			if err := b.completeGoal(goal, user, response.CompletionReason); err != nil {
				return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–µ–ª–∏")
			}
			message := fmt.Sprintf("üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!**\n\n**%s**\n\n%s\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal",
				goal.Title, response.CompletionReason)
			return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
		}

		if response.Status == "near_completion" {
			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
			newStep := models.NewStep(goal.ID, response.Step)
			if err := b.repo.CreateStep(newStep); err != nil {
				return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞")
			}

			message := fmt.Sprintf("üéØ **–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ:**\n\n%s\n\nüí° –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —à–∞–≥–∞ —Ü–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!", newStep.Text)

			menu := &tele.ReplyMarkup{ResizeKeyboard: true}
			btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
			btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")
			btnSimpler := menu.Text("üîΩ –£–ø—Ä–æ—Å—Ç–∏—Ç—å")
			btnComplete := menu.Text("üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å")

			menu.Reply(
				menu.Row(btnDone),
				menu.Row(btnRephrase, btnSimpler),
				menu.Row(btnComplete),
			)

			return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
		}

		if response.Status == "ok" {
			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
			newStep := models.NewStep(goal.ID, response.Step)
			if err := b.repo.CreateStep(newStep); err != nil {
				return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞")
			}

			message := fmt.Sprintf("üìù **–ü–µ—Ä–≤—ã–π —à–∞–≥:**\n\n%s", newStep.Text)

			menu := &tele.ReplyMarkup{ResizeKeyboard: true}
			btnDone := menu.Text("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª")
			btnRephrase := menu.Text("üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å")
			btnSimpler := menu.Text("üîΩ –£–ø—Ä–æ—Å—Ç–∏—Ç—å")

			menu.Reply(
				menu.Row(btnDone),
				menu.Row(btnRephrase, btnSimpler),
			)

			return c.Send(message, menu, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
		}

		return c.Send("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã")

	case "rephrasing":
		userID := strconv.FormatInt(c.Sender().ID, 10)
		user, err := b.repo.GetUser(userID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		currentStep, err := b.repo.GetCurrentStep(user.ActiveGoalID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
		}

		goal, err := b.repo.GetGoal(user.ActiveGoalID)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
		}

		// –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º —à–∞–≥ —á–µ—Ä–µ–∑ LLM
		response, err := b.llmClient.RephraseStep(goal, currentStep, text)
		if err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ —à–∞–≥–∞")
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
		currentStep.Text = response.Step
		currentStep.Rephrase(text)
		if err := b.repo.UpdateStep(currentStep); err != nil {
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞")
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.State = "idle"
		state.TempData = make(map[string]string)

		message := fmt.Sprintf("üîÑ –®–∞–≥ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω:\n\n%s", currentStep.Text)
		return c.Send(message)

	default:
		return c.Send("üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
	}
}

// getOrCreateState –ø–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getOrCreateState(userID int64) *UserState {
	if state, exists := b.states[userID]; exists {
		return state
	}

	state := &UserState{
		UserID:   userID,
		State:    "idle",
		TempData: make(map[string]string),
	}
	b.states[userID] = state
	return state
}

// formatGoalsList —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (b *Bot) formatGoalsList(goals []*models.Goal) string {
	var result strings.Builder
	for i, goal := range goals {
		result.WriteString(fmt.Sprintf("%d. %s\n", i+1, goal.Title))
	}
	return result.String()
}

// completeGoal –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ü–µ–ª—å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) completeGoal(goal *models.Goal, user *models.User, completionReason string) error {
	// –û—Ç–º–µ—á–∞–µ–º —Ü–µ–ª—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
	goal.Status = "completed"
	now := time.Now()
	goal.CompletedAt = &now
	goal.UpdatedAt = now

	if err := b.repo.UpdateGoal(goal); err != nil {
		return fmt.Errorf("failed to update goal: %w", err)
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user.ActiveGoalID = ""
	if err := b.repo.UpdateUser(user); err != nil {
		return fmt.Errorf("failed to update user: %w", err)
	}

	return nil
}

// handleComplete –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /complete
func (b *Bot) handleComplete(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	// –û—Ç–º–µ—á–∞–µ–º —Ü–µ–ª—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
	goal.Status = "completed"
	now := time.Now()
	goal.CompletedAt = &now
	goal.UpdatedAt = now

	if err := b.repo.UpdateGoal(goal); err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user.ActiveGoalID = ""
	if err := b.repo.UpdateUser(user); err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	message := fmt.Sprintf("üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!**\n\n**%s**\n\n–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /newgoal",
		goal.Title)
	return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleContext –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /context
func (b *Bot) handleContext(c tele.Context) error {
	userID := strconv.FormatInt(c.Sender().ID, 10)

	user, err := b.repo.GetUser(userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	if user.ActiveGoalID == "" {
		return c.Send("üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏")
	}

	goal, err := b.repo.GetGoal(user.ActiveGoalID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏")
	}

	message := fmt.Sprintf("üìã **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ü–µ–ª–∏:** %s\n\n", goal.Title)
	message += goal.GetContextSummary()

	return c.Send(message, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}
