package llm

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"goal-helper/internal/models"
)

// OpenAIClient –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
type OpenAIClient struct {
	apiKey     string
	httpClient *http.Client
	baseURL    string
	model      string
}

// NewOpenAIClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OpenAI –∫–ª–∏–µ–Ω—Ç
func NewOpenAIClient(apiKey string) Client {
	return &OpenAIClient{
		apiKey: apiKey,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		baseURL: "https://api.openai.com/v1/chat/completions",
		model:   "gpt-4o-mini-2024-07-18", // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
	}
}

// GenerateStep –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Ü–µ–ª–∏
func (c *OpenAIClient) GenerateStep(goal *models.Goal, completedSteps []*models.Step) (*StepResponse, error) {
	prompt := c.buildStepPrompt(goal, completedSteps)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var stepResponse StepResponse
	if err := json.Unmarshal([]byte(response), &stepResponse); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &stepResponse, nil
}

// RephraseStep –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥
func (c *OpenAIClient) RephraseStep(goal *models.Goal, currentStep *models.Step, userComment string) (*StepResponse, error) {
	prompt := c.buildRephrasePrompt(goal, currentStep, userComment)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var stepResponse StepResponse
	if err := json.Unmarshal([]byte(response), &stepResponse); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &stepResponse, nil
}

// ClarifyGoal –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
func (c *OpenAIClient) ClarifyGoal(goalTitle, goalDescription string) (*ClarificationResponse, error) {
	prompt := c.buildClarificationPrompt(goalTitle, goalDescription)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var clarificationResponse ClarificationResponse
	if err := json.Unmarshal([]byte(response), &clarificationResponse); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &clarificationResponse, nil
}

// GenerateGoalTitle –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
func (c *OpenAIClient) GenerateGoalTitle(description string) (string, error) {
	prompt := c.buildTitlePrompt(description)
	log.Printf("üîç Prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏: %s", prompt)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		return "", fmt.Errorf("failed to call OpenAI: %w", err)
	}
	var titleResponse struct {
		Title string `json:"title"`
	}
	if err := json.Unmarshal([]byte(response), &titleResponse); err != nil {
		return "", fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return titleResponse.Title, nil
}

// callOpenAI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
func (c *OpenAIClient) callOpenAI(prompt string) (string, error) {
	// –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	if c.apiKey == "" {
		return c.mockResponse(prompt)
	}

	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
	requestBody := map[string]any{
		"model": c.model,
		"messages": []map[string]string{
			{
				"role":    "system",
				"content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
			},
			{
				"role":    "user",
				"content": prompt,
			},
		},
		"temperature": 0.7,
		"max_tokens":  500,
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("failed to marshal request: %w", err)
	}

	req, err := http.NewRequest("POST", c.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+c.apiKey)

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return "", fmt.Errorf("OpenAI API error: %s - %s", resp.Status, string(body))
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç OpenAI
	var openAIResponse struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}

	if err := json.Unmarshal(body, &openAIResponse); err != nil {
		return "", fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	if len(openAIResponse.Choices) == 0 {
		return "", fmt.Errorf("no choices in OpenAI response")
	}

	return openAIResponse.Choices[0].Message.Content, nil
}

// mockResponse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API –∫–ª—é—á–∞
func (c *OpenAIClient) mockResponse(prompt string) (string, error) {
	if strings.Contains(prompt, "—É—Ç–æ—á–Ω") {
		return `{"status": "need_clarification", "question": "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–¥–µ—è –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏?"}`, nil
	}

	if strings.Contains(prompt, "–Ω–∞–∑–≤–∞–Ω–∏–µ") {
		return `{"title": "–î–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏"}`, nil
	}

	return `{"status": "ok", "step": "–ù–∞—á–Ω–∏ —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –Ω–∞ –±—É–º–∞–≥–µ"}`, nil
}

// buildStepPrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞
func (c *OpenAIClient) buildStepPrompt(goal *models.Goal, completedSteps []*models.Step) string {
	var prompt strings.Builder

	prompt.WriteString("–¢—ã –∫–æ—É—á, –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏, —Ä–∞–∑–±–∏–≤–∞—è –µ—ë –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏.\n\n")
	prompt.WriteString("–¶–µ–ª—å: " + goal.Title + "\n")
	if goal.Description != "" {
		prompt.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: " + goal.Description + "\n")
	}

	if len(completedSteps) > 0 {
		prompt.WriteString("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:\n")
		for i, step := range completedSteps {
			prompt.WriteString(fmt.Sprintf("%d. %s\n", i+1, step.Text))
		}
		prompt.WriteString("\n")
	}

	prompt.WriteString("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π —à–∞–≥. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.\n\n")
	prompt.WriteString("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):\n")
	prompt.WriteString(`{
  "status": "ok" | "need_clarification",
  "step": "—Ç–µ–∫—Å—Ç —à–∞–≥–∞",
  "question": "—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)"
}`)

	return prompt.String()
}

// buildRephrasePrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —à–∞–≥–∞
func (c *OpenAIClient) buildRephrasePrompt(goal *models.Goal, currentStep *models.Step, userComment string) string {
	var prompt strings.Builder

	prompt.WriteString("–¶–µ–ª—å: " + goal.Title + "\n")
	prompt.WriteString("–¢–µ–∫—É—â–∏–π —à–∞–≥: " + currentStep.Text + "\n")
	prompt.WriteString("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userComment + "\n\n")
	prompt.WriteString("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —à–∞–≥ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n")
	prompt.WriteString("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):\n")
	prompt.WriteString(`{
  "status": "ok",
  "step": "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–≥–∞"
}`)

	return prompt.String()
}

// buildClarificationPrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
func (c *OpenAIClient) buildClarificationPrompt(goalTitle, goalDescription string) string {
	var prompt strings.Builder

	prompt.WriteString("–¶–µ–ª—å: " + goalTitle + "\n")
	if goalDescription != "" {
		prompt.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: " + goalDescription + "\n")
	}
	prompt.WriteString("\n–ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞ ‚Äî –≤–µ—Ä–Ω–∏ —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–ø—Ä–æ—Å:\n\n")
	prompt.WriteString("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):\n")
	prompt.WriteString(`{
  "status": "need_clarification",
  "question": "—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
}`)

	return prompt.String()
}

// buildTitlePrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏
func (c *OpenAIClient) buildTitlePrompt(description string) string {
	var prompt strings.Builder

	prompt.WriteString("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ –∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è.\n\n")
	prompt.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: " + description + "\n\n")
	prompt.WriteString("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:\n")
	prompt.WriteString("- –ö—Ä–∞—Ç–∫–∏–º (3-7 —Å–ª–æ–≤)\n")
	prompt.WriteString("- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º\n")
	prompt.WriteString("- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º\n")
	prompt.WriteString("- –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫\n\n")
	prompt.WriteString("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON):\n")
	prompt.WriteString(`{
  "title": "–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"
}`)

	return prompt.String()
}
