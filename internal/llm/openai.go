package llm

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"

	"goal-helper/internal/models"
)

// OpenAIClient –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
type OpenAIClient struct {
	apiKey     string
	httpClient *http.Client
	baseURL    string
	model      string
}

// NewOpenAIClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OpenAI –∫–ª–∏–µ–Ω—Ç
func NewOpenAIClient(apiKey string) Client {
	return &OpenAIClient{
		apiKey: apiKey,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		baseURL: "https://api.openai.com/v1/chat/completions",
		model:   "gpt-4o-mini-2024-07-18", // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
	}
}

// GenerateStep –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Ü–µ–ª–∏
func (c *OpenAIClient) GenerateStep(goal *models.Goal, completedSteps []*models.Step) (*StepResponse, error) {
	prompt := c.buildStepPrompt(goal, completedSteps)

	log.Printf("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è —Ü–µ–ª–∏: %s", goal.Title)
	log.Printf("üîç –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(prompt))

	response, err := c.callOpenAI(prompt)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI: %v", err)
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: %s", response)

	var stepResponse StepResponse
	if err := json.Unmarshal([]byte(response), &stepResponse); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ OpenAI: %v", err)
		log.Printf("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: %s", response)

		// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
		jsonStart := strings.Index(response, "{")
		jsonEnd := strings.LastIndex(response, "}")

		if jsonStart != -1 && jsonEnd != -1 && jsonEnd > jsonStart {
			jsonPart := response[jsonStart : jsonEnd+1]
			log.Printf("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ JSON: %s", jsonPart)

			if err := json.Unmarshal([]byte(jsonPart), &stepResponse); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ JSON: %v", err)
				return nil, fmt.Errorf("failed to parse OpenAI response JSON: %w", err)
			}
		} else {
			return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
		}
	}

	log.Printf("üîç –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å=%s", stepResponse.Status)
	return &stepResponse, nil
}

// RephraseStep –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥
func (c *OpenAIClient) RephraseStep(goal *models.Goal, currentStep *models.Step, userComment string) (*StepResponse, error) {
	prompt := c.buildRephrasePrompt(goal, currentStep, userComment)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var stepResponse StepResponse
	if err := json.Unmarshal([]byte(response), &stepResponse); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &stepResponse, nil
}

// ClarifyGoal –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
func (c *OpenAIClient) ClarifyGoal(goalTitle, goalDescription string) (*ClarificationResponse, error) {
	prompt := c.buildClarificationPrompt(goalTitle, goalDescription)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var clarificationResponse ClarificationResponse
	if err := json.Unmarshal([]byte(response), &clarificationResponse); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &clarificationResponse, nil
}

// GenerateGoalTitle –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
func (c *OpenAIClient) GenerateGoalTitle(description string) (string, error) {
	prompt := c.buildTitlePrompt(description)
	log.Printf("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è: %s", description)
	log.Printf("üîç Prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏: %s", prompt)

	response, err := c.callOpenAI(prompt)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏: %v", err)
		return "", fmt.Errorf("failed to call OpenAI: %w", err)
	}

	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏: %s", response)

	var titleResponse struct {
		Title string `json:"title"`
	}
	if err := json.Unmarshal([]byte(response), &titleResponse); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏: %v", err)
		log.Printf("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: %s", response)

		// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
		jsonStart := strings.Index(response, "{")
		jsonEnd := strings.LastIndex(response, "}")

		if jsonStart != -1 && jsonEnd != -1 && jsonEnd > jsonStart {
			jsonPart := response[jsonStart : jsonEnd+1]
			log.Printf("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ JSON: %s", jsonPart)

			if err := json.Unmarshal([]byte(jsonPart), &titleResponse); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ JSON: %v", err)
				return "", fmt.Errorf("failed to parse OpenAI response JSON: %w", err)
			}
		} else {
			return "", fmt.Errorf("failed to parse OpenAI response: %w", err)
		}
	}

	log.Printf("üîç –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: %s", titleResponse.Title)
	return titleResponse.Title, nil
}

// callOpenAI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
func (c *OpenAIClient) callOpenAI(prompt string) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	if c.apiKey == "" {
		log.Printf("‚ùå OpenAI API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return "", fmt.Errorf("OpenAI API key is not set")
	}

	log.Printf("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API...")

	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
	requestBody := map[string]any{
		"model": c.model,
		"messages": []map[string]string{
			{
				"role":    "system",
				"content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
			},
			{
				"role":    "user",
				"content": prompt,
			},
		},
		"temperature": 0.7,
		"max_tokens":  500,
		"response_format": map[string]string{
			"type": "json_object",
		},
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return "", fmt.Errorf("failed to marshal request: %w", err)
	}

	req, err := http.NewRequest("POST", c.baseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return "", fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+c.apiKey)

	log.Printf("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ %s", c.baseURL)
	resp, err := c.httpClient.Do(req)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return "", fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω HTTP –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå OpenAI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s - %s", resp.Status, string(body))
		return "", fmt.Errorf("OpenAI API error: %s - %s", resp.Status, string(body))
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
		return "", fmt.Errorf("failed to read response: %w", err)
	}

	log.Printf("üîç –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: %d –±–∞–π—Ç", len(body))

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç OpenAI
	var openAIResponse struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
	}

	if err := json.Unmarshal(body, &openAIResponse); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ OpenAI: %v", err)
		log.Printf("üîç –°—ã—Ä–æ–µ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s", string(body))
		return "", fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	if len(openAIResponse.Choices) == 0 {
		log.Printf("‚ùå OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ choices")
		return "", fmt.Errorf("no choices in OpenAI response")
	}

	content := openAIResponse.Choices[0].Message.Content
	log.Printf("üîç –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç OpenAI: %s", content)

	return content, nil
}

// buildStepPrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞
func (c *OpenAIClient) buildStepPrompt(goal *models.Goal, completedSteps []*models.Step) string {
	var prompt strings.Builder

	prompt.WriteString("–¢—ã –∫–æ—É—á, –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏, —Ä–∞–∑–±–∏–≤–∞—è –µ—ë –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏.\n\n")
	prompt.WriteString("–¶–µ–ª—å: " + goal.Title + "\n")
	if goal.Description != "" {
		prompt.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: " + goal.Description + "\n")
	}

	if len(completedSteps) > 0 {
		prompt.WriteString("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:\n")
		for i, step := range completedSteps {
			prompt.WriteString(fmt.Sprintf("%d. %s\n", i+1, step.Text))
		}
		prompt.WriteString("\n")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏
	prompt.WriteString("–í–ê–ñ–ù–û: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —É–∂–µ —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤.\n")
	prompt.WriteString("–ï—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ - –≤–µ—Ä–Ω–∏ —Å—Ç–∞—Ç—É—Å 'goal_completed' –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.\n")
	prompt.WriteString("–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â–µ 1-2 —à–∞–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è - –≤–µ—Ä–Ω–∏ —Å—Ç–∞—Ç—É—Å 'near_completion'.\n")
	prompt.WriteString("–ï—Å–ª–∏ —Ü–µ–ª—å –µ—â–µ –¥–∞–ª–µ–∫–æ - –≤–µ—Ä–Ω–∏ —Å—Ç–∞—Ç—É—Å 'ok' –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.\n\n")

	prompt.WriteString("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π —à–∞–≥ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.\n\n")
	prompt.WriteString("–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï JSON:\n")
	prompt.WriteString(`{
  "status": "ok" | "need_clarification" | "goal_completed" | "near_completion",
  "step": "—Ç–µ–∫—Å—Ç —à–∞–≥–∞",
  "question": "—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)",
  "completion_reason": "–ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–µ—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
}`)

	return prompt.String()
}

// buildRephrasePrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —à–∞–≥–∞
func (c *OpenAIClient) buildRephrasePrompt(goal *models.Goal, currentStep *models.Step, userComment string) string {
	var prompt strings.Builder

	prompt.WriteString("–¶–µ–ª—å: " + goal.Title + "\n")
	prompt.WriteString("–¢–µ–∫—É—â–∏–π —à–∞–≥: " + currentStep.Text + "\n")
	prompt.WriteString("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userComment + "\n\n")
	prompt.WriteString("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —à–∞–≥ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n")
	prompt.WriteString("–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï JSON:\n")
	prompt.WriteString(`{
  "status": "ok",
  "step": "–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–≥–∞"
}`)

	return prompt.String()
}

// buildClarificationPrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
func (c *OpenAIClient) buildClarificationPrompt(goalTitle, goalDescription string) string {
	var prompt strings.Builder

	prompt.WriteString("–¶–µ–ª—å: " + goalTitle + "\n")
	if goalDescription != "" {
		prompt.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: " + goalDescription + "\n")
	}
	prompt.WriteString("\n–ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–∞ ‚Äî –≤–µ—Ä–Ω–∏ —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–ø—Ä–æ—Å:\n\n")
	prompt.WriteString("–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï JSON:\n")
	prompt.WriteString(`{
  "status": "need_clarification",
  "question": "—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
}`)

	return prompt.String()
}

// buildTitlePrompt —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏
func (c *OpenAIClient) buildTitlePrompt(description string) string {
	var prompt strings.Builder

	prompt.WriteString("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ –∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è.\n\n")
	prompt.WriteString("–û–ø–∏—Å–∞–Ω–∏–µ: " + description + "\n\n")
	prompt.WriteString("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:\n")
	prompt.WriteString("- –ö—Ä–∞—Ç–∫–∏–º (3-7 —Å–ª–æ–≤)\n")
	prompt.WriteString("- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º\n")
	prompt.WriteString("- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º\n")
	prompt.WriteString("- –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫\n\n")
	prompt.WriteString("–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï JSON:\n")
	prompt.WriteString(`{
  "title": "–∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏"
}`)

	return prompt.String()
}
