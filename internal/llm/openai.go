package llm

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"

	"goal-helper/internal/models"
)

// OpenAIClient –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
type OpenAIClient struct {
	apiKey       string
	httpClient   *http.Client
	baseURL      string
	model        string
	promptLoader *PromptLoader // –ó–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
	promptUtils  *PromptUtils  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
}

// APIConfig –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
type APIConfig struct {
	Model   string // –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	BaseURL string // –ë–∞–∑–æ–≤—ã–π URL (responses –∏–ª–∏ completions)
}

// DefaultAPIConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func DefaultAPIConfig() APIConfig {
	return APIConfig{
		Model:   DefaultModel,
		BaseURL: ResponsesAPIEndpoint, // –ù–æ–≤—ã–π endpoint –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
	}
}

// CompletionsAPIConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ completions API
func CompletionsAPIConfig() APIConfig {
	return APIConfig{
		Model:   CompletionsModel,
		BaseURL: CompletionsAPIEndpoint,
	}
}

// NewOpenAIClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OpenAI –∫–ª–∏–µ–Ω—Ç
func NewOpenAIClient(apiKey string) Client {
	return NewOpenAIClientWithResponsesAPI(apiKey)
}

// NewOpenAIClientWithConfig —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π OpenAI –∫–ª–∏–µ–Ω—Ç —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func NewOpenAIClientWithConfig(apiKey string, config APIConfig) Client {
	return &OpenAIClient{
		apiKey: apiKey,
		httpClient: &http.Client{
			Timeout: DefaultTimeout * time.Second,
		},
		baseURL:      config.BaseURL,
		model:        config.Model,
		promptLoader: NewPromptLoader(),
		promptUtils:  NewPromptUtils(),
	}
}

// NewOpenAIClientWithCompletionsAPI —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ä—ã–º Completions API
func NewOpenAIClientWithCompletionsAPI(apiKey string) Client {
	return NewOpenAIClientWithConfig(apiKey, CompletionsAPIConfig())
}

// NewOpenAIClientWithResponsesAPI —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º Responses API
func NewOpenAIClientWithResponsesAPI(apiKey string) Client {
	return NewOpenAIClientWithConfig(apiKey, DefaultAPIConfig())
}

// GenerateStepWithConfig –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Ü–µ–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func (c *OpenAIClient) GenerateStepWithConfig(goal *models.Goal, completedSteps []*models.Step, config APIConfig) (*StepResponse, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
	placeholders := c.promptUtils.BuildStepPromptPlaceholders(goal, completedSteps)
	prompt, err := c.promptLoader.LoadPrompt(PromptStepGeneration, placeholders)
	if err != nil {
		log.Printf(LogPromptLoadError, err)
		return nil, fmt.Errorf("failed to load prompt: %w", err)
	}

	log.Printf(LogSendingRequest, goal.Title)
	log.Printf(LogPromptLength, len(prompt))

	response, err := c.callOpenAI(prompt, config, StepResponseSchema)
	if err != nil {
		log.Printf(LogOpenAIError, err)
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	log.Printf(LogOpenAIResponse, response)

	var stepResponse StepResponse
	if err := UnmarshalLLMResponseWithLogging(response, &stepResponse, "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–≥–∞"); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	log.Printf(LogSuccessResponse, stepResponse.Status)
	return &stepResponse, nil
}

// GenerateStep –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —Ü–µ–ª–∏
func (c *OpenAIClient) GenerateStep(goal *models.Goal, completedSteps []*models.Step) (*StepResponse, error) {
	return c.GenerateStepWithConfig(goal, completedSteps, DefaultAPIConfig())
}

// RephraseStep –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥
func (c *OpenAIClient) RephraseStep(goal *models.Goal, currentStep *models.Step, userComment string) (*StepResponse, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
	placeholders := c.promptUtils.BuildRephrasePromptPlaceholders(goal, currentStep, userComment)

	prompt, err := c.promptLoader.LoadPrompt(PromptStepRephrase, placeholders)
	if err != nil {
		log.Printf(LogPromptLoadError, err)
		return nil, fmt.Errorf("failed to load prompt: %w", err)
	}

	response, err := c.callOpenAI(prompt, DefaultAPIConfig(), RephraseResponseSchema)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var stepResponse StepResponse
	if err := UnmarshalLLMResponseWithLogging(response, &stepResponse, "–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —à–∞–≥–∞"); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &stepResponse, nil
}

// ClarifyGoal –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
func (c *OpenAIClient) ClarifyGoal(goalTitle, goalDescription string) (*ClarificationResponse, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
	placeholders := c.promptUtils.BuildClarificationPromptPlaceholders(goalTitle, goalDescription)

	prompt, err := c.promptLoader.LoadPrompt(PromptGoalClarification, placeholders)
	if err != nil {
		log.Printf(LogPromptLoadError, err)
		return nil, fmt.Errorf("failed to load prompt: %w", err)
	}

	response, err := c.callOpenAI(prompt, DefaultAPIConfig(), ClarificationResponseSchema)
	if err != nil {
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	var clarificationResponse ClarificationResponse
	if err := UnmarshalLLMResponseWithLogging(response, &clarificationResponse, "—É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏"); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	return &clarificationResponse, nil
}

// GenerateGoalTitle –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
func (c *OpenAIClient) GenerateGoalTitle(description string) (string, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
	placeholders := c.promptUtils.BuildTitlePromptPlaceholders(description)

	prompt, err := c.promptLoader.LoadPrompt(PromptTitleGeneration, placeholders)
	if err != nil {
		log.Printf(LogPromptLoadError, err)
		return "", fmt.Errorf("failed to load prompt: %w", err)
	}

	log.Printf(LogTitleGeneration, description)
	log.Printf(LogTitlePrompt, prompt)

	response, err := c.callOpenAI(prompt, DefaultAPIConfig(), TitleResponseSchema)
	if err != nil {
		log.Printf(LogTitleError, err)
		return "", fmt.Errorf("failed to call OpenAI: %w", err)
	}

	log.Printf(LogTitleResponse, response)

	var titleResponse struct {
		Title string `json:"title"`
	}
	if err := UnmarshalLLMResponseWithLogging(response, &titleResponse, "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏"); err != nil {
		return "", fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	log.Printf(LogTitleSuccess, titleResponse.Title)
	return titleResponse.Title, nil
}

// GatherContext —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–≥–æ–≤
func (c *OpenAIClient) GatherContext(goal *models.Goal) (*ContextResponse, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
	placeholders := c.promptUtils.BuildContextPromptPlaceholders(goal)
	prompt, err := c.promptLoader.LoadPrompt(PromptContextGathering, placeholders)
	if err != nil {
		log.Printf(LogPromptLoadError, err)
		return nil, fmt.Errorf("failed to load prompt: %w", err)
	}

	log.Printf(LogContextGathering, goal.Title)

	response, err := c.callOpenAI(prompt, DefaultAPIConfig(), ContextResponseSchema)
	if err != nil {
		log.Printf(LogContextError, err)
		return nil, fmt.Errorf("failed to call OpenAI: %w", err)
	}

	log.Printf(LogContextResponse, response)

	var contextResponse ContextResponse
	if err := UnmarshalLLMResponseWithLogging(response, &contextResponse, "—Å–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"); err != nil {
		return nil, fmt.Errorf("failed to parse OpenAI response: %w", err)
	}

	log.Printf(LogContextSuccess, contextResponse.Status)
	return &contextResponse, nil
}

// callOpenAI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–≥–æ Responses API
func (c *OpenAIClient) callOpenAI(prompt string, config APIConfig, responseSchema map[string]any) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
	if c.apiKey == "" {
		log.Printf(LogAPIKeyMissing)
		return "", fmt.Errorf("OpenAI API key is not set")
	}

	log.Printf("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API...")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
	var requestBody map[string]any

	if config.BaseURL == ResponsesAPIEndpoint {
		// –ù–æ–≤—ã–π Responses API —Å JSON Schema
		requestBody = map[string]any{
			"model": config.Model,
			"input": []map[string]string{
				{
					"role":    "system",
					"content": SystemMessageResponses,
				},
				{
					"role":    "user",
					"content": prompt,
				},
			},
			"text": map[string]any{
				"format": map[string]any{
					"type":   "json_schema",
					"name":   "goal_assistant_response",
					"schema": responseSchema,
					"strict": true,
				},
			},
		}
	} else {
		// –°—Ç–∞—Ä—ã–π Completions API
		requestBody = map[string]any{
			"model": config.Model,
			"messages": []map[string]string{
				{
					"role":    "system",
					"content": SystemMessageCompletions,
				},
				{
					"role":    "user",
					"content": prompt,
				},
			},
			"temperature": DefaultTemperature,
			"max_tokens":  DefaultMaxTokens,
			"response_format": map[string]string{
				"type": "json_object",
			},
		}
	}

	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		log.Printf(LogMarshalingError, err)
		return "", fmt.Errorf("failed to marshal request: %w", err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
	log.Printf(LogSendingRequestDetails)
	log.Printf(LogRequestURL, config.BaseURL)
	log.Printf(LogRequestModel, config.Model)
	log.Printf(LogRequestBody, string(jsonData))

	req, err := http.NewRequest("POST", config.BaseURL, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf(LogRequestError, err)
		return "", fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+c.apiKey)

	log.Printf(LogSendingHTTPRequest, config.BaseURL)
	resp, err := c.httpClient.Do(req)
	if err != nil {
		log.Printf(LogHTTPRequestError, err)
		return "", fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	log.Printf(LogHTTPResponse, resp.StatusCode)

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf(LogAPIError, resp.Status, string(body))
		return "", fmt.Errorf("OpenAI API error: %s - %s", resp.Status, string(body))
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf(LogReadResponseError, err)
		return "", fmt.Errorf("failed to read response: %w", err)
	}

	log.Printf(LogResponseSize, len(body))

	// –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
	log.Printf(LogRawAPIResponse, string(body))

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç OpenAI
	if config.BaseURL == ResponsesAPIEndpoint {
		// –ù–æ–≤—ã–π Responses API –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
		var responsesAPIResponse struct {
			ID     string `json:"id"`
			Object string `json:"object"`
			Status string `json:"status"`
			Model  string `json:"model"`
			Output []struct {
				ID      string `json:"id"`
				Type    string `json:"type"`
				Status  string `json:"status"`
				Content []struct {
					Type string `json:"type"`
					Text string `json:"text"`
				} `json:"content"`
				Role string `json:"role"`
			} `json:"output"`
			Usage struct {
				InputTokens  int `json:"input_tokens"`
				OutputTokens int `json:"output_tokens"`
				TotalTokens  int `json:"total_tokens"`
			} `json:"usage"`
		}

		if err := json.Unmarshal(body, &responsesAPIResponse); err != nil {
			log.Printf(LogParseResponseError, err)
			log.Printf(LogRawResponseBody, string(body))
			return "", fmt.Errorf("failed to parse OpenAI Responses API response: %w", err)
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		log.Printf(LogResponseStructure)
		log.Printf(LogResponseID, responsesAPIResponse.ID)
		log.Printf(LogResponseObject, responsesAPIResponse.Object)
		log.Printf(LogResponseModel, responsesAPIResponse.Model)
		log.Printf("  - Status: %s", responsesAPIResponse.Status)
		log.Printf("  - Output count: %d", len(responsesAPIResponse.Output))
		log.Printf(LogResponseUsage, responsesAPIResponse.Usage)

		if len(responsesAPIResponse.Output) == 0 {
			log.Printf("‚ùå OpenAI Responses API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ output")
			return "", fmt.Errorf("no output in OpenAI Responses API response")
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ output
		output := responsesAPIResponse.Output[0]
		if len(output.Content) == 0 {
			log.Printf("‚ùå –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ output")
			return "", fmt.Errorf("empty content in OpenAI Responses API output")
		}

		// –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
		var content string
		for _, contentItem := range output.Content {
			if contentItem.Type == "output_text" {
				content = contentItem.Text
				break
			}
		}

		if content == "" {
			log.Printf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ output")
			return "", fmt.Errorf("no text content found in OpenAI Responses API output")
		}

		log.Printf(LogContentReceived, content)
		return content, nil

	} else {
		// –°—Ç–∞—Ä—ã–π Completions API
		var openAIResponse struct {
			Choices []struct {
				Message struct {
					Content string `json:"content"`
				} `json:"message"`
			} `json:"choices"`
			ID      string `json:"id"`
			Object  string `json:"object"`
			Created int64  `json:"created"`
			Model   string `json:"model"`
			Usage   struct {
				PromptTokens     int `json:"prompt_tokens"`
				CompletionTokens int `json:"completion_tokens"`
				TotalTokens      int `json:"total_tokens"`
			} `json:"usage"`
		}

		if err := json.Unmarshal(body, &openAIResponse); err != nil {
			log.Printf(LogParseResponseError, err)
			log.Printf(LogRawResponseBody, string(body))
			return "", fmt.Errorf("failed to parse OpenAI response: %w", err)
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		log.Printf(LogResponseStructure)
		log.Printf(LogResponseID, openAIResponse.ID)
		log.Printf(LogResponseObject, openAIResponse.Object)
		log.Printf(LogResponseModel, openAIResponse.Model)
		log.Printf(LogResponseCreated, openAIResponse.Created)
		log.Printf(LogResponseUsage, openAIResponse.Usage)
		log.Printf(LogResponseChoicesCount, len(openAIResponse.Choices))

		if len(openAIResponse.Choices) == 0 {
			log.Printf(LogNoChoices)
			log.Printf(LogFullResponseStructure, openAIResponse)
			return "", fmt.Errorf("no choices in OpenAI response")
		}

		content := openAIResponse.Choices[0].Message.Content
		log.Printf(LogContentReceived, content)

		// –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ API –∏–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
		content = ExtractJSONFromResponsesAPI(content)
		return content, nil
	}
}
