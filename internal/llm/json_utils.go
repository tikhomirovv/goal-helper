package llm

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"
)

// JSONParseResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
type JSONParseResult struct {
	Success bool   // –£—Å–ø–µ—à–Ω–æ –ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω JSON
	Content string // –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON –∫–æ–Ω—Ç–µ–Ω—Ç
	Error   error  // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
}

// ParseLLMResponse –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON
// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
func ParseLLMResponse(response string) *JSONParseResult {
	result := &JSONParseResult{
		Success: false,
		Content: response,
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å—Ç—ã–π JSON
	if isValidJSON(response) {
		result.Success = true
		result.Content = response
		return result
	}

	// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
	jsonContent, found := extractJSONFromText(response)
	if found {
		if isValidJSON(jsonContent) {
			result.Success = true
			result.Content = jsonContent
			return result
		}
	}

	// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ –∏–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
	result.Error = fmt.Errorf("failed to extract valid JSON from LLM response")
	return result
}

// ParseLLMResponseWithLogging –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// –£–¥–æ–±–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è ParseLLMResponse —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func ParseLLMResponseWithLogging(response string, operation string) *JSONParseResult {
	log.Printf("üîç –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: %s", operation)
	log.Printf(LogRawResponse, response)

	result := ParseLLMResponse(response)

	if !result.Success {
		log.Printf(LogParsingError, result.Error)
		return result
	}

	log.Printf("üîç –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω JSON: %s", result.Content)
	return result
}

// UnmarshalLLMResponse —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç ParseLLMResponse –∏ json.Unmarshal
func UnmarshalLLMResponse(response string, v interface{}) error {
	parseResult := ParseLLMResponse(response)
	if !parseResult.Success {
		return parseResult.Error
	}

	if err := json.Unmarshal([]byte(parseResult.Content), v); err != nil {
		return fmt.Errorf("failed to unmarshal JSON: %w", err)
	}

	return nil
}

// UnmarshalLLMResponseWithLogging —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func UnmarshalLLMResponseWithLogging(response string, v interface{}, operation string) error {
	parseResult := ParseLLMResponseWithLogging(response, operation)
	if !parseResult.Success {
		return parseResult.Error
	}

	if err := json.Unmarshal([]byte(parseResult.Content), v); err != nil {
		log.Printf(LogJSONParsingError, err)
		return fmt.Errorf("failed to unmarshal JSON: %w", err)
	}

	return nil
}

// isValidJSON –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º JSON
func isValidJSON(s string) bool {
	var js json.RawMessage
	return json.Unmarshal([]byte(s), &js) == nil
}

// extractJSONFromText –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
// –ò—â–µ—Ç JSON –æ–±—ä–µ–∫—Ç –º–µ–∂–¥—É —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
func extractJSONFromText(text string) (string, bool) {
	// –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON –æ–±—ä–µ–∫—Ç–∞
	start := strings.Index(text, "{")
	if start == -1 {
		return "", false
	}

	// –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON –æ–±—ä–µ–∫—Ç–∞
	// –ù—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏
	bracketCount := 0
	end := -1

	for i := start; i < len(text); i++ {
		if text[i] == '{' {
			bracketCount++
		} else if text[i] == '}' {
			bracketCount--
			if bracketCount == 0 {
				end = i
				break
			}
		}
	}

	if end == -1 || end <= start {
		return "", false
	}

	jsonContent := text[start : end+1]
	log.Printf(LogJSONParsingAttempt, jsonContent)

	return jsonContent, true
}

// ExtractJSONFromResponsesAPI –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ Responses API
// –í –Ω–æ–≤–æ–º API –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞ –≤ content
func ExtractJSONFromResponsesAPI(response string) string {
	// –í –Ω–æ–≤–æ–º Responses API –æ—Ç–≤–µ—Ç —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON
	// –ù–µ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –æ–±–µ—Ä—Ç–∫–∏, –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º API
	// –ù–æ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	return response
}
